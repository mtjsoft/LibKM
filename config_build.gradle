// 关于整个项目(module)的通用gradle配置
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

kotlin {
    experimental {
        coroutines 'enable'
    }
}

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    //这个是ARouter需要配置的kapt
    kapt {
        arguments {
            arg("AROUTER_MODULE_NAME", project.getName())
        }
    }

    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        multiDexEnabled true
        ndk { //设置支持的SO库架构（开发者可以根据需要，选择一个或多个平台的so）
            // "armeabi", "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
            abiFilters "armeabi-v7a"
        }

    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    signingConfigs {
        debug {
            keyAlias 'android'
            keyPassword 'android'
            storeFile file('../android.jks')
            storePassword 'android'
            v1SigningEnabled true
            v2SigningEnabled true
        }

        release {
            v1SigningEnabled true
            v2SigningEnabled true
            keyAlias 'android'
            keyPassword 'android'
            storeFile file('../android.jks')
            storePassword 'android'
        }
    }

    buildTypes {
        release {
            // 移除无用文件
//            shrinkResources true
            // 开启混淆
            minifyEnabled true
            // zipAlign优化
            zipAlignEnabled true
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            shrinkResources false
            minifyEnabled false
            zipAlignEnabled false
            debuggable true
            jniDebuggable true
            signingConfig signingConfigs.debug
        }
    }

//支持java8
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

//开启databinding
//    dataBinding {
//        enabled = true
//    }

//生成libs目录
    sourceSets {
        main {
            jniLibs.srcDir 'libs'
        }
    }

}

dependencies {
    testImplementation rootProject.ext.dependencies["junit"]
    androidTestImplementation rootProject.ext.dependencies["ext_junit"]
    androidTestImplementation rootProject.ext.dependencies["espresso_core"]

    api fileTree(include: ['*.jar'], dir: 'libs')
    api rootProject.ext.dependencies["multidex"]
    api rootProject.ext.dependencies["appcompat"]
    api rootProject.ext.dependencies["appcompat"]
    api rootProject.ext.dependencies["lifecycle_extensions"]
    api rootProject.ext.dependencies["recyclerview"]
    api rootProject.ext.dependencies["cardview"]
    api rootProject.ext.dependencies["support_v4"]
    api rootProject.ext.dependencies["material"]
    // arouter
    api rootProject.ext.dependencies["arouter"]
    kapt rootProject.ext.dependencies["arouter-compiler"]
}